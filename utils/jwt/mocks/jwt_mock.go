// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	jwt "github.com/golang-jwt/jwt/v4"
	mock "github.com/stretchr/testify/mock"
)

// JWT is an autogenerated mock type for the JWT type
type JWT struct {
	mock.Mock
}

// GenerateJwtToken provides a mock function with given fields: claims, method, secret
func (_m *JWT) GenerateJwtToken(claims jwt.Claims, method string, secret string) (string, error) {
	ret := _m.Called(claims, method, secret)

	var r0 string
	if rf, ok := ret.Get(0).(func(jwt.Claims, string, string) string); ok {
		r0 = rf(claims, method, secret)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(jwt.Claims, string, string) error); ok {
		r1 = rf(claims, method, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTokenClaims provides a mock function with given fields: token
func (_m *JWT) GetTokenClaims(token *jwt.Token) (map[string]interface{}, error) {
	ret := _m.Called(token)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(*jwt.Token) map[string]interface{}); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*jwt.Token) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateJwtToken provides a mock function with given fields: tokenString, method, secret
func (_m *JWT) ValidateJwtToken(tokenString string, method string, secret string) (*jwt.Token, error) {
	ret := _m.Called(tokenString, method, secret)

	var r0 *jwt.Token
	if rf, ok := ret.Get(0).(func(string, string, string) *jwt.Token); ok {
		r0 = rf(tokenString, method, secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(tokenString, method, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewJWT interface {
	mock.TestingT
	Cleanup(func())
}

// NewJWT creates a new instance of JWT. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewJWT(t mockConstructorTestingTNewJWT) *JWT {
	mock := &JWT{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// ISchedulerExecution is an autogenerated mock type for the ISchedulerExecution type
type ISchedulerExecution struct {
	mock.Mock
}

// KillJob provides a mock function with given fields: id
func (_m *ISchedulerExecution) KillJob(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunJob provides a mock function with given fields: id, runAt, opt
func (_m *ISchedulerExecution) RunJob(id string, runAt time.Time, opt map[string]string) (int, error) {
	ret := _m.Called(id, runAt, opt)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, time.Time, map[string]string) int); ok {
		r0 = rf(id, runAt, opt)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, time.Time, map[string]string) error); ok {
		r1 = rf(id, runAt, opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewISchedulerExecution interface {
	mock.TestingT
	Cleanup(func())
}

// NewISchedulerExecution creates a new instance of ISchedulerExecution. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewISchedulerExecution(t mockConstructorTestingTNewISchedulerExecution) *ISchedulerExecution {
	mock := &ISchedulerExecution{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
